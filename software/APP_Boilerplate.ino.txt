#include "HSApplication.h"
#include "SystemExclusiveHandler.h"

class ClassName : public HSApplication, public SystemExclusiveHandler {
public:
	void Start() {
	}

    void Controller() {
    }

    void View() {
        gfxHeader("ClassName");
        //DrawInterface();
    }

    void ScreensaverView() {
        //DrawInterface();
    }

    void OnSendSysEx() {
    }

    void OnReceiveSysEx() {
    }

    /////////////////////////////////////////////////////////////////
    // Control handlers
    /////////////////////////////////////////////////////////////////
    void OnLeftButtonPress() {
    }

    void OnLeftButtonLongPress() {
    }

    void OnRightButtonPress() {
    }

    void OnUpButtonPress() {
    }

    void OnDownButtonPress() {
    }

    void OnDownButtonLongPress() {
    }

    void OnLeftEncoderMove(int direction) {
    }

    void OnRightEncoderMove(int direction) {
    }

private:
    int8_t cursor;

    /* Example private screen-drawing method
    void DrawInterface() {
    }
    */
};

ClassName ClassName_instance;

// App stubs
void ClassName_init() {
    ClassName_instance.BaseStart();
}

// Not using O_C Storage
size_t ClassName_storageSize() {return 0;}
size_t ClassName_save(void *storage) {return 0;}
size_t ClassName_restore(const void *storage) {return 0;}

void ClassName_isr() {
	return ClassName_instance.BaseController();
}

void ClassName_handleAppEvent(OC::AppEvent event) {
    if (event == OC::APP_EVENT_SUSPEND) {
        ClassName_instance.OnSendSysEx();
    }
}

void ClassName_loop() {} // Deprecated

void ClassName_menu() {
    ClassName_instance.BaseView();
}

void ClassName_screensaver() {
    ClassName_instance.BaseScreensaverView();
}

void ClassName_handleButtonEvent(const UI::Event &event) {
    // For left encoder, handle press and long press
    if (event.control == OC::CONTROL_BUTTON_L) {
        if (event.type == UI::EVENT_BUTTON_LONG_PRESS) ClassName_instance.OnLeftButtonLongPress();
        else ClassName_instance.OnLeftButtonPress();
    }

    // For right encoder, only handle press (long press is reserved)
    if (event.control == OC::CONTROL_BUTTON_R && event.type == UI::EVENT_BUTTON_PRESS) ClassName_instance.OnRightButtonPress();

    // For up button, handle only press (long press is reserved)
    if (event.control == OC::CONTROL_BUTTON_UP) ClassName_instance.OnUpButtonPress();

    // For down button, handle press and long press
    if (event.control == OC::CONTROL_BUTTON_DOWN) {
        if (event.type == UI::EVENT_BUTTON_PRESS) ClassName_instance.OnDownButtonPress();
        if (event.type == UI::EVENT_BUTTON_LONG_PRESS) ClassName_instance.OnDownButtonLongPress();
    }
}

void ClassName_handleEncoderEvent(const UI::Event &event) {
    // Left encoder turned
    if (event.control == OC::CONTROL_ENCODER_L) ClassName_instance.OnLeftEncoderMove(event.value);

    // Right encoder turned
    if (event.control == OC::CONTROL_ENCODER_R) ClassName_instance.OnRightEncoderMove(event.value);
}
